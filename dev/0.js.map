{"version":3,"sources":["webpack:///./app/components/00-utilities/color/color-thief.js"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["/*\n\tthis is a customized version of Color Thief\n\tworks client-side only\n\tI did it this way, because the npm package comes with non-npm dependencies for servserside\n*/\n\n/*\n * Color Thief v2.0\n * by Lokesh Dhakar - http://www.lokeshdhakar.com\n *\n * License\n * -------\n * Creative Commons Attribution 2.5 License:\n * http://creativecommons.org/licenses/by/2.5/\n *\n * Thanks\n * ------\n * Nick Rabinowitz - For creating quantize.js.\n * John Schulz - For clean up and optimization. @JFSIII\n * Nathan Spady - For adding drag and drop support to the demo page.\n *\n */\n\n\n/*\n\tCanvasImage Class\n\tClass that wraps the html image element and canvas.\n\tIt also simplifies some of the canvas context manipulation\n\twith a set of helper functions.\n*/\n\nvar CanvasImage = function (image) {\n\tthis.canvas = document.createElement('canvas');\n\tdocument.body.appendChild(this.canvas);\n\tvar img = image;\n\n\tthis.context = this.canvas.getContext('2d');\n\n\tthis.width\t= this.canvas.width\t= img.width;\n\tthis.height = this.canvas.height = img.height;\n\n\tthis.context.drawImage(img, 0, 0, this.width, this.height);\n};\n\nCanvasImage.prototype.clear = function () {\n\tthis.context.clearRect(0, 0, this.width, this.height);\n};\n\nCanvasImage.prototype.update = function (imageData) {\n\tthis.context.putImageData(imageData, 0, 0);\n};\n\nCanvasImage.prototype.getPixelCount = function () {\n\treturn this.width * this.height;\n};\n\nCanvasImage.prototype.getImageData = function () {\n\treturn this.context.getImageData(0, 0, this.width, this.height);\n};\n\nCanvasImage.prototype.removeCanvas = function () {\n\tif (this.canvas.parentNode) {\n\t\tthis.canvas.parentNode.removeChild(this.canvas);\n\t}\n};\n\n\nvar ColorThief = function () {};\n\n/*\n * getColor(sourceImage[, quality])\n * returns {r: num, g: num, b: num}\n *\n * Use the median cut algorithm provided by quantize.js to cluster similar\n * colors and return the base color from the largest cluster.\n *\n * Quality is an optional argument. It needs to be an integer. 0 is the highest quality settings.\n * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the\n * faster a color will be returned but the greater the likelihood that it will not be the visually\n * most dominant color.\n *\n * */\nColorThief.prototype.getColor = function(sourceImage, quality, allowWhite) {\n\t// control if second parameter is allowWhite\n\tif (quality === true || quality === false) {\n\t\tallowWhite = quality;\n\t\tquality = undefined;\n\t}\n\n\tvar palette = this.getPalette(sourceImage, 3, quality, allowWhite);\n\tvar dominantColor = palette[0];\n\treturn dominantColor;\n};\n\n\n/*\n * getPalette(sourceImage[, colorCount, quality])\n * returns array[ {r: num, g: num, b: num}, {r: num, g: num, b: num}, ...]\n *\n * Use the median cut algorithm provided by quantize.js to cluster similar colors.\n *\n * colorCount determines the size of the palette; the number of colors returned. If not set, it\n * defaults to 10.\n *\n * BUGGY: Function does not always return the requested amount of colors. It can be +/- 2.\n *\n * quality is an optional argument. It needs to be an integer. 0 is the highest quality settings.\n * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the\n * faster the palette generation but the greater the likelihood that colors will be missed.\n *\n *\n */\nColorThief.prototype.getPalette = function(sourceImage, colorCount, quality, allowWhite) {\n\n\tif (typeof colorCount === 'undefined') {\n\t\tcolorCount = 10;\n\t};\n\tif (typeof quality === 'undefined') {\n\t\tquality = 10;\n\t};\n\n\t// Create custom CanvasImage object\n\tvar image\t\t= new CanvasImage(sourceImage);\n\tvar imageData\t= image.getImageData();\n\tvar pixels\t = imageData.data;\n\tvar pixelCount = image.getPixelCount();\n\tvar palette\t= this.getPaletteFromPixels(pixels, pixelCount, colorCount, quality, allowWhite);\n\n\t// Clean up\n\timage.removeCanvas();\n\n\treturn palette;\n};\n\n/*\n * getPaletteFromPixels(pixels, pixelCount, colorCount, quality)\n * returns array[ {r: num, g: num, b: num}, {r: num, g: num, b: num}, ...]\n *\n * Low-level function that takes pixels and computes color palette.\n * Used by getPalette() and getColor()\n *\n */\nColorThief.prototype.getPaletteFromPixels = function(pixels, pixelCount, colorCount, quality, allowWhite) {\n\n\t// Store the RGB values in an array format suitable for quantize function\n\tvar pixelArray = [];\n\tfor (var i = 0, offset, r, g, b, a; i < pixelCount; i = i + quality) {\n\t\toffset = i * 4;\n\t\tr = pixels[offset + 0];\n\t\tg = pixels[offset + 1];\n\t\tb = pixels[offset + 2];\n\t\ta = pixels[offset + 3];\n\t\t// If pixel is mostly opaque and not white\n\t\tif (a >= 125) {\n\t\t\tif ((!(r > 250 && g > 250 && b > 250) && allowWhite !== true) || (!(r > 255 && g > 255 && b > 255) && allowWhite === true )) {\n\t\t\t\tpixelArray.push([r, g, b]);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Send array to quantize function which clusters values\n\t// using median cut algorithm\n\tvar cmap\t= MMCQ.quantize(pixelArray, colorCount);\n\tvar palette = cmap.palette();\n\n\treturn palette;\n}\n\n/*!\n * quantize.js Copyright 2008 Nick Rabinowitz.\n * Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php\n */\n\n// fill out a couple protovis dependencies\n/*!\n * Block below copied from Protovis: http://mbostock.github.com/protovis/\n * Copyright 2010 Stanford Visualization Group\n * Licensed under the BSD License: http://www.opensource.org/licenses/bsd-license.php\n */\nif (!pv) {\n\tvar pv = {\n\t\tmap: function(array, f) {\n\t\t\tvar o = {};\n\t\t\treturn f\n\t\t\t\t? array.map(function(d, i) { o.index = i; return f.call(o, d); })\n\t\t\t\t: array.slice();\n\t\t},\n\t\tnaturalOrder: function(a, b) {\n\t\t\treturn (a < b) ? -1 : ((a > b) ? 1 : 0);\n\t\t},\n\t\tsum: function(array, f) {\n\t\t\tvar o = {};\n\t\t\treturn array.reduce(f\n\t\t\t\t? function(p, d, i) { o.index = i; return p + f.call(o, d); }\n\t\t\t\t: function(p, d) { return p + d; }, 0);\n\t\t},\n\t\tmax: function(array, f) {\n\t\t\treturn Math.max.apply(null, f ? pv.map(array, f) : array);\n\t\t}\n\t};\n}\n\n\n\n/**\n * Basic Javascript port of the MMCQ (modified median cut quantization)\n * algorithm from the Leptonica library (http://www.leptonica.com/).\n * Returns a color map you can use to map original pixels to the reduced\n * palette. Still a work in progress.\n *\n * @author Nick Rabinowitz\n * @example\n\n// array of pixels as [R,G,B] arrays\nvar myPixels = [[190,197,190], [202,204,200], [207,214,210], [211,214,211], [205,207,207]\n\t\t\t\t// etc\n\t\t\t\t];\nvar maxColors = 4;\n\nvar cmap = MMCQ.quantize(myPixels, maxColors);\nvar newPalette = cmap.palette();\nvar newPixels = myPixels.map(function(p) {\n\treturn cmap.map(p);\n});\n\n */\nvar MMCQ = (function() {\n\t// private constants\n\tvar sigbits = 5,\n\t\trshift = 8 - sigbits,\n\t\tmaxIterations = 1000,\n\t\tfractByPopulations = 0.75;\n\n\t// get reduced-space color index for a pixel\n\tfunction getColorIndex(r, g, b) {\n\t\treturn (r << (2 * sigbits)) + (g << sigbits) + b;\n\t}\n\n\t// Simple priority queue\n\tfunction PQueue(comparator) {\n\t\tvar contents = [],\n\t\t\tsorted = false;\n\n\t\tfunction sort() {\n\t\t\tcontents.sort(comparator);\n\t\t\tsorted = true;\n\t\t}\n\n\t\treturn {\n\t\t\tpush: function(o) {\n\t\t\t\tcontents.push(o);\n\t\t\t\tsorted = false;\n\t\t\t},\n\t\t\tpeek: function(index) {\n\t\t\t\tif (!sorted) sort();\n\t\t\t\tif (index===undefined) index = contents.length - 1;\n\t\t\t\treturn contents[index];\n\t\t\t},\n\t\t\tpop: function() {\n\t\t\t\tif (!sorted) sort();\n\t\t\t\treturn contents.pop();\n\t\t\t},\n\t\t\tsize: function() {\n\t\t\t\treturn contents.length;\n\t\t\t},\n\t\t\tmap: function(f) {\n\t\t\t\treturn contents.map(f);\n\t\t\t},\n\t\t\tdebug: function() {\n\t\t\t\tif (!sorted) sort();\n\t\t\t\treturn contents;\n\t\t\t}\n\t\t};\n\t}\n\n\t// 3d color space box\n\tfunction VBox(r1, r2, g1, g2, b1, b2, histo) {\n\t\tvar vbox = this;\n\t\tvbox.r1 = r1;\n\t\tvbox.r2 = r2;\n\t\tvbox.g1 = g1;\n\t\tvbox.g2 = g2;\n\t\tvbox.b1 = b1;\n\t\tvbox.b2 = b2;\n\t\tvbox.histo = histo;\n\t}\n\tVBox.prototype = {\n\t\tvolume: function(force) {\n\t\t\tvar vbox = this;\n\t\t\tif (!vbox._volume || force) {\n\t\t\t\tvbox._volume = ((vbox.r2 - vbox.r1 + 1) * (vbox.g2 - vbox.g1 + 1) * (vbox.b2 - vbox.b1 + 1));\n\t\t\t}\n\t\t\treturn vbox._volume;\n\t\t},\n\t\tcount: function(force) {\n\t\t\tvar vbox = this,\n\t\t\t\thisto = vbox.histo;\n\t\t\tif (!vbox._count_set || force) {\n\t\t\t\tvar npix = 0,\n\t\t\t\t\ti, j, k;\n\t\t\t\tfor (i = vbox.r1; i <= vbox.r2; i++) {\n\t\t\t\t\tfor (j = vbox.g1; j <= vbox.g2; j++) {\n\t\t\t\t\t\tfor (k = vbox.b1; k <= vbox.b2; k++) {\n\t\t\t\t\t\t\t var index = getColorIndex(i,j,k);\n\t\t\t\t\t\t\t npix += (histo[index] || 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvbox._count = npix;\n\t\t\t\tvbox._count_set = true;\n\t\t\t}\n\t\t\treturn vbox._count;\n\t\t},\n\t\tcopy: function() {\n\t\t\tvar vbox = this;\n\t\t\treturn new VBox(vbox.r1, vbox.r2, vbox.g1, vbox.g2, vbox.b1, vbox.b2, vbox.histo);\n\t\t},\n\t\tavg: function(force) {\n\t\t\tvar vbox = this,\n\t\t\t\thisto = vbox.histo;\n\t\t\tif (!vbox._avg || force) {\n\t\t\t\tvar ntot = 0,\n\t\t\t\t\tmult = 1 << (8 - sigbits),\n\t\t\t\t\trsum = 0,\n\t\t\t\t\tgsum = 0,\n\t\t\t\t\tbsum = 0,\n\t\t\t\t\thval,\n\t\t\t\t\ti, j, k, histoindex;\n\t\t\t\tfor (i = vbox.r1; i <= vbox.r2; i++) {\n\t\t\t\t\tfor (j = vbox.g1; j <= vbox.g2; j++) {\n\t\t\t\t\t\tfor (k = vbox.b1; k <= vbox.b2; k++) {\n\t\t\t\t\t\t\t histoindex = getColorIndex(i,j,k);\n\t\t\t\t\t\t\t hval = histo[histoindex] || 0;\n\t\t\t\t\t\t\t ntot += hval;\n\t\t\t\t\t\t\t rsum += (hval * (i + 0.5) * mult);\n\t\t\t\t\t\t\t gsum += (hval * (j + 0.5) * mult);\n\t\t\t\t\t\t\t bsum += (hval * (k + 0.5) * mult);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ntot) {\n\t\t\t\t\tvbox._avg = [~~(rsum/ntot), ~~(gsum/ntot), ~~(bsum/ntot)];\n\t\t\t\t} else {\n\t\t\t\t\tvbox._avg = [\n\t\t\t\t\t\t~~(mult * (vbox.r1 + vbox.r2 + 1) / 2),\n\t\t\t\t\t\t~~(mult * (vbox.g1 + vbox.g2 + 1) / 2),\n\t\t\t\t\t\t~~(mult * (vbox.b1 + vbox.b2 + 1) / 2)\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn vbox._avg;\n\t\t},\n\t\tcontains: function(pixel) {\n\t\t\tvar vbox = this,\n\t\t\t\trval = pixel[0] >> rshift;\n\t\t\t\tgval = pixel[1] >> rshift;\n\t\t\t\tbval = pixel[2] >> rshift;\n\t\t\treturn (rval >= vbox.r1 && rval <= vbox.r2 &&\n\t\t\t\t\tgval >= vbox.g1 && gval <= vbox.g2 &&\n\t\t\t\t\tbval >= vbox.b1 && bval <= vbox.b2);\n\t\t}\n\t};\n\n\t// Color map\n\tfunction CMap() {\n\t\tthis.vboxes = new PQueue(function(a,b) {\n\t\t\treturn pv.naturalOrder(\n\t\t\t\ta.vbox.count()*a.vbox.volume(),\n\t\t\t\tb.vbox.count()*b.vbox.volume()\n\t\t\t)\n\t\t});;\n\t}\n\tCMap.prototype = {\n\t\tpush: function(vbox) {\n\t\t\tthis.vboxes.push({\n\t\t\t\tvbox: vbox,\n\t\t\t\tcolor: vbox.avg()\n\t\t\t});\n\t\t},\n\t\tpalette: function() {\n\t\t\treturn this.vboxes.map(function(vb) { return vb.color });\n\t\t},\n\t\tsize: function() {\n\t\t\treturn this.vboxes.size();\n\t\t},\n\t\tmap: function(color) {\n\t\t\tvar vboxes = this.vboxes;\n\t\t\tfor (var i=0; i<vboxes.size(); i++) {\n\t\t\t\tif (vboxes.peek(i).vbox.contains(color)) {\n\t\t\t\t\treturn vboxes.peek(i).color;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.nearest(color);\n\t\t},\n\t\tnearest: function(color) {\n\t\t\tvar vboxes = this.vboxes,\n\t\t\t\td1, d2, pColor;\n\t\t\tfor (var i=0; i<vboxes.size(); i++) {\n\t\t\t\td2 = Math.sqrt(\n\t\t\t\t\tMath.pow(color[0] - vboxes.peek(i).color[0], 2) +\n\t\t\t\t\tMath.pow(color[1] - vboxes.peek(i).color[1], 2) +\n\t\t\t\t\tMath.pow(color[2] - vboxes.peek(i).color[2], 2)\n\t\t\t\t);\n\t\t\t\tif (d2 < d1 || d1 === undefined) {\n\t\t\t\t\td1 = d2;\n\t\t\t\t\tpColor = vboxes.peek(i).color;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pColor;\n\t\t},\n\t\tforcebw: function() {\n\t\t\t// XXX: won't\twork yet\n\t\t\tvar vboxes = this.vboxes;\n\t\t\tvboxes.sort(function(a,b) { return pv.naturalOrder(pv.sum(a.color), pv.sum(b.color) )});\n\n\t\t\t// force darkest color to black if everything < 5\n\t\t\tvar lowest = vboxes[0].color;\n\t\t\tif (lowest[0] < 5 && lowest[1] < 5 && lowest[2] < 5)\n\t\t\t\tvboxes[0].color = [0,0,0];\n\n\t\t\t// force lightest color to white if everything > 251\n\t\t\tvar idx = vboxes.length-1,\n\t\t\t\thighest = vboxes[idx].color;\n\t\t\tif (highest[0] > 251 && highest[1] > 251 && highest[2] > 251)\n\t\t\t\tvboxes[idx].color = [255,255,255];\n\t\t}\n\t};\n\n\t// histo (1-d array, giving the number of pixels in\n\t// each quantized region of color space), or null on error\n\tfunction getHisto(pixels) {\n\t\tvar histosize = 1 << (3 * sigbits),\n\t\t\thisto = new Array(histosize),\n\t\t\tindex, rval, gval, bval;\n\t\tpixels.forEach(function(pixel) {\n\t\t\trval = pixel[0] >> rshift;\n\t\t\tgval = pixel[1] >> rshift;\n\t\t\tbval = pixel[2] >> rshift;\n\t\t\tindex = getColorIndex(rval, gval, bval);\n\t\t\thisto[index] = (histo[index] || 0) + 1;\n\t\t});\n\t\treturn histo;\n\t}\n\n\tfunction vboxFromPixels(pixels, histo) {\n\t\tvar rmin=1000000, rmax=0,\n\t\t\tgmin=1000000, gmax=0,\n\t\t\tbmin=1000000, bmax=0,\n\t\t\trval, gval, bval;\n\t\t// find min/max\n\t\tpixels.forEach(function(pixel) {\n\t\t\trval = pixel[0] >> rshift;\n\t\t\tgval = pixel[1] >> rshift;\n\t\t\tbval = pixel[2] >> rshift;\n\t\t\tif (rval < rmin) rmin = rval;\n\t\t\telse if (rval > rmax) rmax = rval;\n\t\t\tif (gval < gmin) gmin = gval;\n\t\t\telse if (gval > gmax) gmax = gval;\n\t\t\tif (bval < bmin) bmin = bval;\n\t\t\telse if (bval > bmax)\tbmax = bval;\n\t\t});\n\t\treturn new VBox(rmin, rmax, gmin, gmax, bmin, bmax, histo);\n\t}\n\n\tfunction medianCutApply(histo, vbox) {\n\t\tif (!vbox.count()) return;\n\n\t\tvar rw = vbox.r2 - vbox.r1 + 1,\n\t\t\tgw = vbox.g2 - vbox.g1 + 1,\n\t\t\tbw = vbox.b2 - vbox.b1 + 1,\n\t\t\tmaxw = pv.max([rw, gw, bw]);\n\t\t// only one pixel, no split\n\t\tif (vbox.count() == 1) {\n\t\t\treturn [vbox.copy()]\n\t\t}\n\t\t/* Find the partial sum arrays along the selected axis. */\n\t\tvar total = 0,\n\t\t\tpartialsum = [],\n\t\t\tlookaheadsum = [],\n\t\t\ti, j, k, sum, index;\n\t\tif (maxw == rw) {\n\t\t\tfor (i = vbox.r1; i <= vbox.r2; i++) {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (j = vbox.g1; j <= vbox.g2; j++) {\n\t\t\t\t\tfor (k = vbox.b1; k <= vbox.b2; k++) {\n\t\t\t\t\t\tindex = getColorIndex(i,j,k);\n\t\t\t\t\t\tsum += (histo[index] || 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttotal += sum;\n\t\t\t\tpartialsum[i] = total;\n\t\t\t}\n\t\t}\n\t\telse if (maxw == gw) {\n\t\t\tfor (i = vbox.g1; i <= vbox.g2; i++) {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (j = vbox.r1; j <= vbox.r2; j++) {\n\t\t\t\t\tfor (k = vbox.b1; k <= vbox.b2; k++) {\n\t\t\t\t\t\tindex = getColorIndex(j,i,k);\n\t\t\t\t\t\tsum += (histo[index] || 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttotal += sum;\n\t\t\t\tpartialsum[i] = total;\n\t\t\t}\n\t\t}\n\t\telse {\t/* maxw == bw */\n\t\t\tfor (i = vbox.b1; i <= vbox.b2; i++) {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (j = vbox.r1; j <= vbox.r2; j++) {\n\t\t\t\t\tfor (k = vbox.g1; k <= vbox.g2; k++) {\n\t\t\t\t\t\tindex = getColorIndex(j,k,i);\n\t\t\t\t\t\tsum += (histo[index] || 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttotal += sum;\n\t\t\t\tpartialsum[i] = total;\n\t\t\t}\n\t\t}\n\t\tpartialsum.forEach(function(d,i) {\n\t\t\tlookaheadsum[i] = total-d\n\t\t});\n\t\tfunction doCut(color) {\n\t\t\tvar dim1 = color + '1',\n\t\t\t\tdim2 = color + '2',\n\t\t\t\tleft, right, vbox1, vbox2, d2, count2=0;\n\t\t\tfor (i = vbox[dim1]; i <= vbox[dim2]; i++) {\n\t\t\t\tif (partialsum[i] > total / 2) {\n\t\t\t\t\tvbox1 = vbox.copy();\n\t\t\t\t\tvbox2 = vbox.copy();\n\t\t\t\t\tleft = i - vbox[dim1];\n\t\t\t\t\tright = vbox[dim2] - i;\n\t\t\t\t\tif (left <= right)\n\t\t\t\t\t\td2 = Math.min(vbox[dim2] - 1, ~~(i + right / 2));\n\t\t\t\t\telse d2 = Math.max(vbox[dim1], ~~(i - 1 - left / 2));\n\t\t\t\t\t// avoid 0-count boxes\n\t\t\t\t\twhile (!partialsum[d2]) d2++;\n\t\t\t\t\tcount2 = lookaheadsum[d2];\n\t\t\t\t\twhile (!count2 && partialsum[d2-1]) count2 = lookaheadsum[--d2];\n\t\t\t\t\t// set dimensions\n\t\t\t\t\tvbox1[dim2] = d2;\n\t\t\t\t\tvbox2[dim1] = vbox1[dim2] + 1;\n\t\t\t\t\treturn [vbox1, vbox2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\t// determine the cut planes\n\t\treturn maxw == rw ? doCut('r') :\n\t\t\tmaxw == gw ? doCut('g') :\n\t\t\tdoCut('b');\n\t}\n\n\tfunction quantize(pixels, maxcolors) {\n\t\t// short-circuit\n\t\tif (!pixels.length || maxcolors < 2 || maxcolors > 256) {\n\t\t\treturn new CMap();\n\t\t}\n\n\t\t// XXX: check color content and convert to grayscale if insufficient\n\n\t\tvar histo = getHisto(pixels),\n\t\t\thistosize = 1 << (3 * sigbits);\n\n\t\t// check that we aren't below maxcolors already\n\t\tvar nColors = 0;\n\t\thisto.forEach(function() { nColors++ });\n\t\tif (nColors <= maxcolors) {\n\t\t\t// XXX: generate the new colors from the histo and return\n\t\t}\n\n\t\t// get the beginning vbox from the colors\n\t\tvar vbox = vboxFromPixels(pixels, histo),\n\t\t\tpq = new PQueue(function(a,b) { return pv.naturalOrder(a.count(), b.count()) });\n\t\tpq.push(vbox);\n\n\t\t// inner function to do the iteration\n\t\tfunction iter(lh, target) {\n\t\t\tvar ncolors = 1,\n\t\t\t\tniters = 0,\n\t\t\t\tvbox;\n\t\t\twhile (niters < maxIterations) {\n\t\t\t\tvbox = lh.pop();\n\t\t\t\tif (!vbox.count())\t{ /* just put it back */\n\t\t\t\t\tlh.push(vbox);\n\t\t\t\t\tniters++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// do the cut\n\t\t\t\tvar vboxes = medianCutApply(histo, vbox),\n\t\t\t\t\tvbox1 = vboxes[0],\n\t\t\t\t\tvbox2 = vboxes[1];\n\n\t\t\t\tif (!vbox1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlh.push(vbox1);\n\t\t\t\tif (vbox2) {\t/* vbox2 can be null */\n\t\t\t\t\tlh.push(vbox2);\n\t\t\t\t\tncolors++;\n\t\t\t\t}\n\t\t\t\tif (ncolors >= target) return;\n\t\t\t\tif (niters++ > maxIterations) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// first set of colors, sorted by population\n\t\titer(pq, fractByPopulations * maxcolors);\n\n\t\t// Re-sort by the product of pixel occupancy times the size in color space.\n\t\tvar pq2 = new PQueue(function(a,b) {\n\t\t\treturn pv.naturalOrder(a.count()*a.volume(), b.count()*b.volume())\n\t\t});\n\t\twhile (pq.size()) {\n\t\t\tpq2.push(pq.pop());\n\t\t}\n\n\t\t// next set - generate the median cuts using the (npix * vol) sorting.\n\t\titer(pq2, maxcolors - pq2.size());\n\n\t\t// calculate the actual colors\n\t\tvar cmap = new CMap();\n\t\twhile (pq2.size()) {\n\t\t\tcmap.push(pq2.pop());\n\t\t}\n\n\t\treturn cmap;\n\t}\n\n\treturn {\n\t\tquantize: quantize\n\t}\n})();\n\n\nexport { ColorThief };\n\n\n\n// WEBPACK FOOTER //\n// ./app/components/00-utilities/color/color-thief.js"],"sourceRoot":""}